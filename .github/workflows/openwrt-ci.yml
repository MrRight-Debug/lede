name: OpenWrt-CI

on:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 20 * * *'

permissions:
  contents: read

jobs:
  build_openwrt:
    name: Build OpenWrt Firmware
    runs-on: ubuntu-22.04
    
    env:
      DEFAULT_IP: 192.168.50.1
      DEFAULT_PWD: a5623141
      PPPOE_USER: 057179674959
      PPPOE_PASS: 760551
      TARGET: x86
      SUBTARGET: 64
      PROFILE: generic

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Apply custom configurations
        run: |
          # 修改默认IP和管理密码
          sed -i "s/192.168.1.1/$DEFAULT_IP/g" package/base-files/files/bin/config_generate
          sed -i "s/password/$DEFAULT_PWD/g" package/base-files/files/bin/config_generate
          
          # 添加第三方插件源
          echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> feeds.conf.default
          echo "src-git openclash https://github.com/vernesong/OpenClash" >> feeds.conf.default
          echo "src-git vlmcsd https://github.com/cokebar/openwrt-vlmcsd" >> feeds.conf.default
          
          # 更新feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 创建预置配置文件目录
          mkdir -p files/etc/config
          
          # 配置WAN口为eth0
          cat > files/etc/config/network <<EOF
config interface 'wan'
        option ifname 'eth0'
        option proto 'pppoe'
        option username '$PPPOE_USER'
        option password '$PPPOE_PASS'
        option ipv6 'auto'
        
config interface 'lan'
        option type 'bridge'
        option ifname 'eth1'
        option proto 'static'
        option netmask '255.255.255.0'
        option ipaddr '$DEFAULT_IP'
EOF

          # 启用uhttpd HTTPS
          cat > files/etc/config/uhttpd <<EOF
config uhttpd 'main'
        option listen_http '0.0.0.0:80'
        option listen_https '0.0.0.0:443'
        option redirect_https '1'
        option home '/www'
        option cert '/etc/uhttpd.crt'
        option key '/etc/uhttpd.key'
EOF
          
          # 生成自签名证书
          mkdir -p files/etc
          openssl req -new -x509 -nodes -days 365 -out files/etc/uhttpd.crt -keyout files/etc/uhttpd.key -subj "/CN=openwrt"
          
          # 设置Alpha为默认主题
          cat > files/etc/config/luci <<EOF
config core 'main'
        option lang 'auto'
        option resourcebase '/luci-static/resources'
        option mediaurlbase '/luci-static/alpha'

config extern 'flash_keep'
        option uci '/etc/config/'

config internal 'languages'
        option zh_cn '简体中文 (Simplified Chinese)'

config internal 'sauth'
        option sessionpath '/tmp/luci-sessions'
        option sessiontime '3600'

config internal 'themes'
        option Alpha '/luci-static/alpha'
EOF

      - name: Apply custom .config
        run: |
          cat > .config <<EOF
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y
CONFIG_TARGET_x86_64_Generic=y

# 生成EFI镜像
CONFIG_GRUB_IMAGES=y
CONFIG_GRUB_EFI_IMAGES=y
CONFIG_VDI_IMAGES=n
CONFIG_VMDK_IMAGES=n
CONFIG_ISO_IMAGES=y

# IPv6支持
CONFIG_PACKAGE_ipv6helper=y
CONFIG_PACKAGE_dnsmasq_full_ipv6=y
CONFIG_PACKAGE_odhcp6c=y

# 指定插件
CONFIG_PACKAGE_open-vm-tools=y
CONFIG_PACKAGE_luci-theme-alpha=y
CONFIG_PACKAGE_luci-app-vlmcsd=y
CONFIG_PACKAGE_luci-app-ttyd=y
CONFIG_PACKAGE_luci-app-turboacc=y
CONFIG_PACKAGE_luci-app-openclash=y
CONFIG_PACKAGE_luci-app-opkg=y
CONFIG_PACKAGE_luci-app-uhttpd=y

# uhttpd HTTPS
CONFIG_PACKAGE_uhttpd=y
CONFIG_PACKAGE_libustream-openssl=y
CONFIG_PACKAGE_uhttpd-mod-ubus=y

# 其他依赖
CONFIG_PACKAGE_luci-lib-ipkg=y
CONFIG_PACKAGE_ttyd=y
CONFIG_PACKAGE_kmod-tun=y
CONFIG_PACKAGE_kmod-ipt-nat6=y
EOF
          
          make defconfig

      - name: Download packages
        run: make download -j16

      - name: Compile firmware
        run: |
          make -j$(($(nproc)+1)) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact
          cp -rf $(find ./bin/targets/ -type f $ -name "*.bin" -o -name "*.img" -o -name "*.gz" $) ./artifact/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_Artifacts_$(date +%Y%m%d)
          path: ./artifact/
