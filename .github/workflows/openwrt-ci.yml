name: OpenWrt-CI

on:
  push:
    branches: [ master ]   # 添加push触发编译
  schedule:
    - cron: '0 20 * * *'   # UTC时间20:00定时编译

permissions:
  contents: read

jobs:
  build_openwrt:
    name: Build OpenWrt Firmware
    runs-on: ubuntu-22.04
    
    # 添加环境变量配置区
    env:
      DEFAULT_IP: 192.168.50.1  # 自定义默认IP
      DEFAULT_PWD: yourpassword # 自定义默认密码
      TARGET: x86_64           # 编译目标架构
      SUBTARGET: generic       # 子目标
      PROFILE: generic         # 设备配置文件

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # ========== 自定义配置区域 ==========
      - name: Apply custom configurations
        run: |
          # 1. 修改默认IP和密码
          sed -i "s/192.168.1.1/${{ env.DEFAULT_IP }}/g" package/base-files/files/bin/config_generate
          sed -i "s/password/${{ env.DEFAULT_PWD }}/g" package/base-files/files/bin/config_generate
          
          # 2. 添加常用插件源
          echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall" >> feeds.conf.default
          echo "src-git helloworld https://github.com/fw876/helloworld" >> feeds.conf.default
          echo "src-git openclash https://github.com/vernesong/OpenClash" >> feeds.conf.default
          
          # 3. 更新feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 4. 创建预置配置文件目录
          mkdir -p files/etc/config

      # ========== 自定义.config文件 ==========
      - name: Apply custom .config
        run: |
          # 如果存在自定义配置文件则应用
          if [ -f "custom.config" ]; then
            cp custom.config .config
          else
            # 生成默认配置
            make defconfig
            
            # 添加基本配置选项
            cat >> .config <<EOF
CONFIG_TARGET_${{ env.TARGET }}=y
CONFIG_TARGET_${{ env.TARGET }}_${{ env.SUBTARGET }}=y
CONFIG_TARGET_${{ env.TARGET }}_${{ env.SUBTARGET }}_${{ env.PROFILE }}=y
CONFIG_PACKAGE_luci-ssl-openssl=y
CONFIG_PACKAGE_luci-app-passwall=y
CONFIG_PACKAGE_luci-theme-argon=y
EOF
          fi
          
          # 应用配置
          make defconfig

      - name: Download packages
        run: make download -j16

      # ========== 编译选项 ==========
      - name: Compile firmware
        run: |
          # 使用多核编译，失败时使用单核详细模式
          make -j$(($(nproc)+1)) || make -j1 V=s
          
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact
          # 复制所有固件文件
          cp -rf $(find ./bin/targets/ -type f $ -name "*.bin" -o -name "*.img" -o -name "*.gz" $) ./artifact/
          # 复制所有IPK插件
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/
          # 复制编译信息
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_Artifacts_$(date +%Y%m%d)
          path: ./artifact/
